# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_PZCK1THw96tc6LNd2MEmMT9O3m9crfE
"""

from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

# Run this cell to mount your Google Drive.
from google.colab import drive
drive.mount('/content/drive')

import os
import glob
import cv2
import numpy as np
import matplotlib.image as mimg
import matplotlib.pyplot as pt

x=[]
#y=np.zeros(10*40)
count=-1
y=[]
#pt.figure(1)
#pt.ion()
paths=[]
for i in range(1,41):
    for j in range(1,11):
        #pt.cla()
       
        path='/content/drive/My Drive/orl_face/u%d/%d.png'%(i,j)
        paths.append(path)
np.random.shuffle(paths)
for i in paths:
  count=count+1
  im=mimg.imread(i)
  im_r=im
  im_r=cv2.resize(im_r,(64,64))
  im_r.reshape(1,64,64)
        #feat=im.reshape(1,-1)
  x.append(im_r)
  vd=i.split('/')
  clas=vd[-2]
  clas=clas.strip('u')
  y.append(clas)
        #y[count]=i
print(len(x),y)

data= np.array(x, dtype="float32")
data=data.reshape(data.shape[0],1,64,64)
print(data.shape)

from keras.layers import Dense
from keras.layers import Dropout
from keras.models import Sequential
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from keras import backend as K

K.set_image_dim_ordering("th")
seed=7
np.random.seed(seed)

x_train=data[:320,:]
x_test=data[320:,:]
print(len(x_train))
print(len(x_test))
y=np.array(y,dtype='float32')
y_train=y[:320]
y_test=y[320:]
print(len(y_train))
print(len(y_test))
x_train=x_train.reshape(x_train.shape[0],1,64,64).astype('float32')
x_test=x_test.reshape(x_test.shape[0],1,64,64).astype('float32')
x_train=x_train/255
x_test=x_test/255
y_train=np_utils.to_categorical(y_train)
y_test=np_utils.to_categorical(y_test)
num_classes=y_test.shape[1]
print(num_classes)
model=Sequential()

model.add(Conv2D(32,(5,5), input_shape=(1,64,64),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=100, batch_size=50, verbose=2)